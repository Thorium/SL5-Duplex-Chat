//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace DataClient.PushServiceClient {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PushMessage", Namespace="http://schemas.datacontract.org/2004/07/WCFHost")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DataClient.PushServiceClient.PushMessage.SystemMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DataClient.PushServiceClient.PushMessage.UserMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DataClient.PushServiceClient.PushMessage.UserJoin))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DataClient.PushServiceClient.PushMessage.UserPart))]
    public partial class PushMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int _tagField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _tag {
            get {
                return this._tagField;
            }
            set {
                if ((this._tagField.Equals(value) != true)) {
                    this._tagField = value;
                    this.RaisePropertyChanged("_tag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PushMessage.SystemMessage", Namespace="http://schemas.datacontract.org/2004/07/WCFHost")]
        public partial class SystemMessage : DataClient.PushServiceClient.PushMessage {
            
            private string itemField;
            
            [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
            public string item {
                get {
                    return this.itemField;
                }
                set {
                    if ((object.ReferenceEquals(this.itemField, value) != true)) {
                        this.itemField = value;
                        this.RaisePropertyChanged("item");
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PushMessage.UserMessage", Namespace="http://schemas.datacontract.org/2004/07/WCFHost")]
        public partial class UserMessage : DataClient.PushServiceClient.PushMessage {
            
            private string item1Field;
            
            private string item2Field;
            
            [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
            public string item1 {
                get {
                    return this.item1Field;
                }
                set {
                    if ((object.ReferenceEquals(this.item1Field, value) != true)) {
                        this.item1Field = value;
                        this.RaisePropertyChanged("item1");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
            public string item2 {
                get {
                    return this.item2Field;
                }
                set {
                    if ((object.ReferenceEquals(this.item2Field, value) != true)) {
                        this.item2Field = value;
                        this.RaisePropertyChanged("item2");
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PushMessage.UserJoin", Namespace="http://schemas.datacontract.org/2004/07/WCFHost")]
        public partial class UserJoin : DataClient.PushServiceClient.PushMessage {
            
            private string itemField;
            
            [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
            public string item {
                get {
                    return this.itemField;
                }
                set {
                    if ((object.ReferenceEquals(this.itemField, value) != true)) {
                        this.itemField = value;
                        this.RaisePropertyChanged("item");
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PushMessage.UserPart", Namespace="http://schemas.datacontract.org/2004/07/WCFHost")]
        public partial class UserPart : DataClient.PushServiceClient.PushMessage {
            
            private string itemField;
            
            [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
            public string item {
                get {
                    return this.itemField;
                }
                set {
                    if ((object.ReferenceEquals(this.itemField, value) != true)) {
                        this.itemField = value;
                        this.RaisePropertyChanged("item");
                    }
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/WCFHost/", ConfigurationName="PushServiceClient.PushService", CallbackContract=typeof(DataClient.PushServiceClient.PushServiceCallback))]
    public interface PushService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://localhost/WCFHost/PushService/SendMessageToAll")]
        System.IAsyncResult BeginSendMessageToAll(string message, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessageToAll(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://localhost/WCFHost/PushService/SendMessageTo")]
        System.IAsyncResult BeginSendMessageTo(string message, string target, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessageTo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://localhost/WCFHost/PushService/RegisterToObserve")]
        System.IAsyncResult BeginRegisterToObserve(string myName, System.AsyncCallback callback, object asyncState);
        
        void EndRegisterToObserve(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PushServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/WCFHost/PushService/ReceiveUserList")]
        void ReceiveUserList(string[] users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/WCFHost/PushService/ReceiveStream")]
        void ReceiveStream(DataClient.PushServiceClient.PushMessage message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PushServiceChannel : DataClient.PushServiceClient.PushService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PushServiceClient : System.ServiceModel.DuplexClientBase<DataClient.PushServiceClient.PushService>, DataClient.PushServiceClient.PushService {
        
        private BeginOperationDelegate onBeginSendMessageToAllDelegate;
        
        private EndOperationDelegate onEndSendMessageToAllDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageToAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageToDelegate;
        
        private EndOperationDelegate onEndSendMessageToDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageToCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterToObserveDelegate;
        
        private EndOperationDelegate onEndRegisterToObserveDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterToObserveCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PushServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PushServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PushServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PushServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PushServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public PushServiceClient(string endpointConfigurationName) : 
                this(new PushServiceClientCallback(), endpointConfigurationName) {
        }
        
        private PushServiceClient(PushServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PushServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new PushServiceClientCallback(), binding, remoteAddress) {
        }
        
        private PushServiceClient(PushServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PushServiceClient() : 
                this(new PushServiceClientCallback()) {
        }
        
        private PushServiceClient(PushServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageToAllCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageToCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterToObserveCompleted;
        
        public event System.EventHandler<ReceiveUserListReceivedEventArgs> ReceiveUserListReceived;
        
        public event System.EventHandler<ReceiveStreamReceivedEventArgs> ReceiveStreamReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DataClient.PushServiceClient.PushService.BeginSendMessageToAll(string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessageToAll(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DataClient.PushServiceClient.PushService.EndSendMessageToAll(System.IAsyncResult result) {
            base.Channel.EndSendMessageToAll(result);
        }
        
        private System.IAsyncResult OnBeginSendMessageToAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string message = ((string)(inValues[0]));
            return ((DataClient.PushServiceClient.PushService)(this)).BeginSendMessageToAll(message, callback, asyncState);
        }
        
        private object[] OnEndSendMessageToAll(System.IAsyncResult result) {
            ((DataClient.PushServiceClient.PushService)(this)).EndSendMessageToAll(result);
            return null;
        }
        
        private void OnSendMessageToAllCompleted(object state) {
            if ((this.SendMessageToAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageToAllCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageToAllAsync(string message) {
            this.SendMessageToAllAsync(message, null);
        }
        
        public void SendMessageToAllAsync(string message, object userState) {
            if ((this.onBeginSendMessageToAllDelegate == null)) {
                this.onBeginSendMessageToAllDelegate = new BeginOperationDelegate(this.OnBeginSendMessageToAll);
            }
            if ((this.onEndSendMessageToAllDelegate == null)) {
                this.onEndSendMessageToAllDelegate = new EndOperationDelegate(this.OnEndSendMessageToAll);
            }
            if ((this.onSendMessageToAllCompletedDelegate == null)) {
                this.onSendMessageToAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageToAllCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageToAllDelegate, new object[] {
                        message}, this.onEndSendMessageToAllDelegate, this.onSendMessageToAllCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DataClient.PushServiceClient.PushService.BeginSendMessageTo(string message, string target, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessageTo(message, target, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DataClient.PushServiceClient.PushService.EndSendMessageTo(System.IAsyncResult result) {
            base.Channel.EndSendMessageTo(result);
        }
        
        private System.IAsyncResult OnBeginSendMessageTo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string message = ((string)(inValues[0]));
            string target = ((string)(inValues[1]));
            return ((DataClient.PushServiceClient.PushService)(this)).BeginSendMessageTo(message, target, callback, asyncState);
        }
        
        private object[] OnEndSendMessageTo(System.IAsyncResult result) {
            ((DataClient.PushServiceClient.PushService)(this)).EndSendMessageTo(result);
            return null;
        }
        
        private void OnSendMessageToCompleted(object state) {
            if ((this.SendMessageToCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageToCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageToAsync(string message, string target) {
            this.SendMessageToAsync(message, target, null);
        }
        
        public void SendMessageToAsync(string message, string target, object userState) {
            if ((this.onBeginSendMessageToDelegate == null)) {
                this.onBeginSendMessageToDelegate = new BeginOperationDelegate(this.OnBeginSendMessageTo);
            }
            if ((this.onEndSendMessageToDelegate == null)) {
                this.onEndSendMessageToDelegate = new EndOperationDelegate(this.OnEndSendMessageTo);
            }
            if ((this.onSendMessageToCompletedDelegate == null)) {
                this.onSendMessageToCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageToCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageToDelegate, new object[] {
                        message,
                        target}, this.onEndSendMessageToDelegate, this.onSendMessageToCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DataClient.PushServiceClient.PushService.BeginRegisterToObserve(string myName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterToObserve(myName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DataClient.PushServiceClient.PushService.EndRegisterToObserve(System.IAsyncResult result) {
            base.Channel.EndRegisterToObserve(result);
        }
        
        private System.IAsyncResult OnBeginRegisterToObserve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string myName = ((string)(inValues[0]));
            return ((DataClient.PushServiceClient.PushService)(this)).BeginRegisterToObserve(myName, callback, asyncState);
        }
        
        private object[] OnEndRegisterToObserve(System.IAsyncResult result) {
            ((DataClient.PushServiceClient.PushService)(this)).EndRegisterToObserve(result);
            return null;
        }
        
        private void OnRegisterToObserveCompleted(object state) {
            if ((this.RegisterToObserveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterToObserveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterToObserveAsync(string myName) {
            this.RegisterToObserveAsync(myName, null);
        }
        
        public void RegisterToObserveAsync(string myName, object userState) {
            if ((this.onBeginRegisterToObserveDelegate == null)) {
                this.onBeginRegisterToObserveDelegate = new BeginOperationDelegate(this.OnBeginRegisterToObserve);
            }
            if ((this.onEndRegisterToObserveDelegate == null)) {
                this.onEndRegisterToObserveDelegate = new EndOperationDelegate(this.OnEndRegisterToObserve);
            }
            if ((this.onRegisterToObserveCompletedDelegate == null)) {
                this.onRegisterToObserveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterToObserveCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterToObserveDelegate, new object[] {
                        myName}, this.onEndRegisterToObserveDelegate, this.onRegisterToObserveCompletedDelegate, userState);
        }
        
        private void OnReceiveUserListReceived(object state) {
            if ((this.ReceiveUserListReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveUserListReceived(this, new ReceiveUserListReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReceiveStreamReceived(object state) {
            if ((this.ReceiveStreamReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveStreamReceived(this, new ReceiveStreamReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((this.ReceiveUserListReceived != null) 
                        || (this.ReceiveStreamReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DataClient.PushServiceClient.PushService CreateChannel() {
            return new PushServiceClientChannel(this);
        }
        
        private class PushServiceClientCallback : object, PushServiceCallback {
            
            private PushServiceClient proxy;
            
            public void Initialize(PushServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReceiveUserList(string[] users) {
                this.proxy.OnReceiveUserListReceived(new object[] {
                            users});
            }
            
            public void ReceiveStream(DataClient.PushServiceClient.PushMessage message) {
                this.proxy.OnReceiveStreamReceived(new object[] {
                            message});
            }
        }
        
        private class PushServiceClientChannel : ChannelBase<DataClient.PushServiceClient.PushService>, DataClient.PushServiceClient.PushService {
            
            public PushServiceClientChannel(System.ServiceModel.DuplexClientBase<DataClient.PushServiceClient.PushService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendMessageToAll(string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = message;
                System.IAsyncResult _result = base.BeginInvoke("SendMessageToAll", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMessageToAll(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMessageToAll", _args, result);
            }
            
            public System.IAsyncResult BeginSendMessageTo(string message, string target, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = message;
                _args[1] = target;
                System.IAsyncResult _result = base.BeginInvoke("SendMessageTo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMessageTo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMessageTo", _args, result);
            }
            
            public System.IAsyncResult BeginRegisterToObserve(string myName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = myName;
                System.IAsyncResult _result = base.BeginInvoke("RegisterToObserve", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegisterToObserve(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RegisterToObserve", _args, result);
            }
        }
    }
    
    public class ReceiveUserListReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveUserListReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] users {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public class ReceiveStreamReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveStreamReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DataClient.PushServiceClient.PushMessage message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DataClient.PushServiceClient.PushMessage)(this.results[0]));
            }
        }
    }
}
